#!/usr/local/bin/perl
# Create a lang file out of a txt file
use strict;
use Getopt::Long;
my $verbose=0;
my $minline=20;
my $lc=1;
my $guten=1;
my $minword=1;
my $token="vowel";
my $apos=0;
my $opt_help=0;
my $usage = "$0 <textfile>
    <textfile>         Input file from which to build lang file
    -guten             Input file is a project gutenberg file. Default: $guten
    -apos              Leave apostrophes in place (e.g. russian)
    -v                 Enable verbose logging
    -minline <n>       Min line length. Default $minline
    -minword <n>       Discard words up to this length. Default: $minword
    -lc                Skip words containing uppercase letters. Default: $lc
    (such words are usually infrequent and not so interesting)
    -token <token>     Use specified tokenization method. 
    Possible values: vowel, trigram, digram
    \n";

GetOptions(
    "v" => \$verbose
    ,"h|help" => \$opt_help
    ,"minline=i" => \$minline
    ,"apos" => \$apos
    ,"guten!" => \$guten
    ,"lc!" => \$lc
    ,"minword=i" => \$minword
    ,"token=s" => \$token
    ) or die $usage;

my $infile=shift @ARGV;
die $usage if $opt_help;

# --------------------------------------------------------------------------------

sub transition {
    my ($lang,$syllable,$to)=@_;
    $lang->{$syllable}->{$to}++;
    return $to;
}

# --------------------------------------------------------------------------------

sub analyze_line($$$) {
    my ($lang,$line,$syllable)=@_;
    chomp $line;
    if ($lc) {
	# delete words containing uppercase
	$line =~ s/\b(.*[A-Z].*?)\b//g;
	#$line=lc($line);# lowercase it
    }
    if (length($line) < $minline) {
	$line="";
    }
    # replace special characters with word boundaries
    if ($apos) {
	$line =~ s/[^a-zA-Z'"]/ /g;
    } else {
	$line =~ s/[^a-zA-Z]/ /g;
    }
    # ensure end-of-word condition at the end of line
    $line .= " ";
    # strip short words
    if ($minword > 0) {
	my $x=$minword-1;
	$line =~ s/\b\w{1,$x}\b//g;
    }
    print "$line\n" if $verbose;
    while ($line) {
	# seeing end of word...
	if ($line =~ s/^\s+//) {
	    $syllable = transition($lang,$syllable,"-");
	}
	my $handled=0;
	if ($token eq "vowel") {
	    # vowel method encodes key bits nicely
	    # but can sound weird
	    if ($line =~ s/^([aeiouy]+)//i) { # vowels
		# y is always treated as a vowel
		# even when it starts a word (yam, yellow)
		$syllable = transition($lang,$syllable,$1);
		$handled=1;
	    } elsif ($line =~ s/^([bcdfghjklnmpqrstvwxz]+)//i) { # consonants
		$syllable = transition($lang,$syllable,$1);
		$handled=1;
	    }
	} elsif ($token eq "trigram") {
	    if ($line =~ s/^(\w\w\w)//i) { # 3 chars
		$syllable = transition($lang,$syllable,$1);
		$handled=1;
	    } elsif ($line =~ s/^(\w\w)//i) { # 2 chars
		$syllable = transition($lang,$syllable,$1);
		$handled=1;
	    } elsif ($line =~ s/^(\w)//i) { # 1 char
		$syllable = transition($lang,$syllable,$1);
		$handled=1;
	    }
	} elsif ($token eq "digram") {
	    if ($line =~ s/^(\w\w)//i) { # 2 chars
		$syllable = transition($lang,$syllable,$1);
		$handled=1;
	    } elsif ($line =~ s/^(\w)//i) { # 1 char
		$syllable = transition($lang,$syllable,$1);
		$handled=1;
	    }
	}
	# default case to prevent infinite loop...
	if (!$handled) {
	    if ($line =~ s/^(.)//i) { # 1 char -- any char
		$syllable = transition($lang,$syllable,$1);
	    }
	}
	print " -> $syllable" if $verbose>1;
    }
    print "\n" if $verbose>1;
}

#--------------------------------------------------------------------------------

sub dumplang($) {
    my $lang=$_[0];
    foreach my $start (sort keys %$lang) {
	my $map=$lang->{$start};
	my @keys=sort keys %$map;
	my $sumfreq=0;
	my $out="$start:";
	my $ntarget=0;
	foreach my $key (@keys) {
	    my $freq=$map->{$key};
	    $sumfreq += $freq;
	    if (!($key eq "-" && $start eq "-")) {
		$out .= " $key:$freq";
		$ntarget++;
	    }
	}
	if ($ntarget) {
	    $out .= "\n";
	    print $out;
	}
    }
}

#--------------------------------------------------------------------------------

# read file
sub doit() {
    open my $R, "$infile" or die "open [$infile]: $!\n\n$usage";
    my $saw_header=!$guten;
    my $saw_footer=0;
    my $lang={};
    while (<$R>) {
	if (/START OF .* PROJECT GUTENBERG/) {
	    $saw_header=1;
	    $saw_footer=0;
	} elsif (/END OF .* PROJECT GUTENBERG/) {
	    $saw_footer=1;
	} elsif ($saw_header && !$saw_footer) {
	    # only process what's between start and end marker
	    analyze_line($lang,$_,"-");
	}
    }
    dumplang($lang);
    
    if (!$saw_header) {
	die "Input file is not a project Gutenberg text file."
	    ."\nPlease re-run with --no-guten flag";
    }
}

doit();
